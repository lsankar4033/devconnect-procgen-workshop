/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TinyWorldInterface extends ethers.utils.Interface {
  functions: {
    "cachedTiles(uint256,uint256)": FunctionFragment;
    "confirmTile(tuple,uint8)": FunctionFragment;
    "getCachedTile(tuple)": FunctionFragment;
    "getTile(tuple)": FunctionFragment;
    "getTouchedTiles()": FunctionFragment;
    "initialize(uint256,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "perlinMax()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "seed()": FunctionFragment;
    "touchedCoords(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vecs(uint256,uint256)": FunctionFragment;
    "vecsDenom()": FunctionFragment;
    "worldScale()": FunctionFragment;
    "worldWidth()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cachedTiles",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTile",
    values: [{ x: BigNumberish; y: BigNumberish }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCachedTile",
    values: [{ x: BigNumberish; y: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getTile",
    values: [{ x: BigNumberish; y: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "getTouchedTiles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "perlinMax", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "seed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "touchedCoords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vecs",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vecsDenom", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "worldScale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "worldWidth",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "cachedTiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCachedTile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTouchedTiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "perlinMax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "touchedCoords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vecs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vecsDenom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "worldScale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "worldWidth", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class TinyWorld extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TinyWorldInterface;

  functions: {
    cachedTiles(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      raritySeed: BigNumber;
      tileType: number;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: number;
    }>;

    "cachedTiles(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      raritySeed: BigNumber;
      tileType: number;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: number;
    }>;

    confirmTile(
      coords: { x: BigNumberish; y: BigNumberish },
      localTileType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "confirmTile(tuple,uint8)"(
      coords: { x: BigNumberish; y: BigNumberish },
      localTileType: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getCachedTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
      };
    }>;

    "getCachedTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      0: {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
      };
    }>;

    getTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "getTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getTouchedTiles(overrides?: CallOverrides): Promise<{
      0: {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
      }[];
    }>;

    "getTouchedTiles()"(overrides?: CallOverrides): Promise<{
      0: {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
      }[];
    }>;

    initialize(
      _seed: BigNumberish,
      _worldWidth: BigNumberish,
      _worldScale: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(uint256,uint256,uint256)"(
      _seed: BigNumberish,
      _worldWidth: BigNumberish,
      _worldScale: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    "owner()"(overrides?: CallOverrides): Promise<{
      0: string;
    }>;

    perlinMax(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "perlinMax()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    seed(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "seed()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    touchedCoords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "touchedCoords(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vecs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "vecs(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    vecsDenom(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    "vecsDenom()"(overrides?: CallOverrides): Promise<{
      0: number;
    }>;

    worldScale(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "worldScale()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    worldWidth(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "worldWidth()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  cachedTiles(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    raritySeed: BigNumber;
    tileType: number;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: BigNumber;
    2: number;
  }>;

  "cachedTiles(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    raritySeed: BigNumber;
    tileType: number;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: BigNumber;
    2: number;
  }>;

  confirmTile(
    coords: { x: BigNumberish; y: BigNumberish },
    localTileType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "confirmTile(tuple,uint8)"(
    coords: { x: BigNumberish; y: BigNumberish },
    localTileType: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getCachedTile(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    perlin: [BigNumber, BigNumber];
    raritySeed: BigNumber;
    tileType: number;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: [BigNumber, BigNumber];
    2: BigNumber;
    3: number;
  }>;

  "getCachedTile(tuple)"(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: CallOverrides
  ): Promise<{
    coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    perlin: [BigNumber, BigNumber];
    raritySeed: BigNumber;
    tileType: number;
    0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
    1: [BigNumber, BigNumber];
    2: BigNumber;
    3: number;
  }>;

  getTile(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "getTile(tuple)"(
    coords: { x: BigNumberish; y: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getTouchedTiles(
    overrides?: CallOverrides
  ): Promise<
    {
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      perlin: [BigNumber, BigNumber];
      raritySeed: BigNumber;
      tileType: number;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: number;
    }[]
  >;

  "getTouchedTiles()"(
    overrides?: CallOverrides
  ): Promise<
    {
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      perlin: [BigNumber, BigNumber];
      raritySeed: BigNumber;
      tileType: number;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: number;
    }[]
  >;

  initialize(
    _seed: BigNumberish,
    _worldWidth: BigNumberish,
    _worldScale: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(uint256,uint256,uint256)"(
    _seed: BigNumberish,
    _worldWidth: BigNumberish,
    _worldScale: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  perlinMax(overrides?: CallOverrides): Promise<number>;

  "perlinMax()"(overrides?: CallOverrides): Promise<number>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  seed(overrides?: CallOverrides): Promise<BigNumber>;

  "seed()"(overrides?: CallOverrides): Promise<BigNumber>;

  touchedCoords(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    x: BigNumber;
    y: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "touchedCoords(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    x: BigNumber;
    y: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vecs(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "vecs(uint256,uint256)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  vecsDenom(overrides?: CallOverrides): Promise<number>;

  "vecsDenom()"(overrides?: CallOverrides): Promise<number>;

  worldScale(overrides?: CallOverrides): Promise<BigNumber>;

  "worldScale()"(overrides?: CallOverrides): Promise<BigNumber>;

  worldWidth(overrides?: CallOverrides): Promise<BigNumber>;

  "worldWidth()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cachedTiles(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      raritySeed: BigNumber;
      tileType: number;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: number;
    }>;

    "cachedTiles(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      raritySeed: BigNumber;
      tileType: number;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: BigNumber;
      2: number;
    }>;

    confirmTile(
      coords: { x: BigNumberish; y: BigNumberish },
      localTileType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "confirmTile(tuple,uint8)"(
      coords: { x: BigNumberish; y: BigNumberish },
      localTileType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCachedTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      perlin: [BigNumber, BigNumber];
      raritySeed: BigNumber;
      tileType: number;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: number;
    }>;

    "getCachedTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      perlin: [BigNumber, BigNumber];
      raritySeed: BigNumber;
      tileType: number;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: number;
    }>;

    getTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      perlin: [BigNumber, BigNumber];
      raritySeed: BigNumber;
      tileType: number;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: number;
    }>;

    "getTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<{
      coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      perlin: [BigNumber, BigNumber];
      raritySeed: BigNumber;
      tileType: number;
      0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
      1: [BigNumber, BigNumber];
      2: BigNumber;
      3: number;
    }>;

    getTouchedTiles(
      overrides?: CallOverrides
    ): Promise<
      {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
      }[]
    >;

    "getTouchedTiles()"(
      overrides?: CallOverrides
    ): Promise<
      {
        coords: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        perlin: [BigNumber, BigNumber];
        raritySeed: BigNumber;
        tileType: number;
        0: { x: BigNumber; y: BigNumber; 0: BigNumber; 1: BigNumber };
        1: [BigNumber, BigNumber];
        2: BigNumber;
        3: number;
      }[]
    >;

    initialize(
      _seed: BigNumberish,
      _worldWidth: BigNumberish,
      _worldScale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(uint256,uint256,uint256)"(
      _seed: BigNumberish,
      _worldWidth: BigNumberish,
      _worldScale: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    perlinMax(overrides?: CallOverrides): Promise<number>;

    "perlinMax()"(overrides?: CallOverrides): Promise<number>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    seed(overrides?: CallOverrides): Promise<BigNumber>;

    "seed()"(overrides?: CallOverrides): Promise<BigNumber>;

    touchedCoords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "touchedCoords(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      x: BigNumber;
      y: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vecs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "vecs(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    vecsDenom(overrides?: CallOverrides): Promise<number>;

    "vecsDenom()"(overrides?: CallOverrides): Promise<number>;

    worldScale(overrides?: CallOverrides): Promise<BigNumber>;

    "worldScale()"(overrides?: CallOverrides): Promise<BigNumber>;

    worldWidth(overrides?: CallOverrides): Promise<BigNumber>;

    "worldWidth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    cachedTiles(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "cachedTiles(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    confirmTile(
      coords: { x: BigNumberish; y: BigNumberish },
      localTileType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "confirmTile(tuple,uint8)"(
      coords: { x: BigNumberish; y: BigNumberish },
      localTileType: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getCachedTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getCachedTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "getTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    getTouchedTiles(overrides?: CallOverrides): Promise<BigNumber>;

    "getTouchedTiles()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _seed: BigNumberish,
      _worldWidth: BigNumberish,
      _worldScale: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(uint256,uint256,uint256)"(
      _seed: BigNumberish,
      _worldWidth: BigNumberish,
      _worldScale: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    perlinMax(overrides?: CallOverrides): Promise<BigNumber>;

    "perlinMax()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    seed(overrides?: CallOverrides): Promise<BigNumber>;

    "seed()"(overrides?: CallOverrides): Promise<BigNumber>;

    touchedCoords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "touchedCoords(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vecs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vecs(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vecsDenom(overrides?: CallOverrides): Promise<BigNumber>;

    "vecsDenom()"(overrides?: CallOverrides): Promise<BigNumber>;

    worldScale(overrides?: CallOverrides): Promise<BigNumber>;

    "worldScale()"(overrides?: CallOverrides): Promise<BigNumber>;

    worldWidth(overrides?: CallOverrides): Promise<BigNumber>;

    "worldWidth()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cachedTiles(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "cachedTiles(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    confirmTile(
      coords: { x: BigNumberish; y: BigNumberish },
      localTileType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "confirmTile(tuple,uint8)"(
      coords: { x: BigNumberish; y: BigNumberish },
      localTileType: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getCachedTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCachedTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTile(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "getTile(tuple)"(
      coords: { x: BigNumberish; y: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getTouchedTiles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTouchedTiles()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _seed: BigNumberish,
      _worldWidth: BigNumberish,
      _worldScale: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(uint256,uint256,uint256)"(
      _seed: BigNumberish,
      _worldWidth: BigNumberish,
      _worldScale: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    perlinMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "perlinMax()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    seed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "seed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    touchedCoords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "touchedCoords(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vecs(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vecs(uint256,uint256)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vecsDenom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vecsDenom()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    worldScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "worldScale()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    worldWidth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "worldWidth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
